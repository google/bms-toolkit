# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: Shut down RAC clusterware
  # Regrettably we can't use ansible's service module, as Oracle's initscripts don't report status
  shell:
    service ohasd stop
  args:
    warn: false
  become: yes
  register: srvice_stop
  ignore_errors: true
  when: cluster_name is defined

- name: Deconfigure RAC CRS
  shell: |
    ( $ORACLE_HOME/crs/install/rootcrs.sh -deconfig -force ) || true
  environment:
    ORACLE_HOME: "{{ grid_home }}"
    PATH: "{{ grid_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
    LD_LIBRARY_PATH: "{{ grid_home }}/lib:${LD_LIBRARY_PATH}"
  register: has_deconfig
  ignore_errors: yes
  become: yes
  become_user: "{{ grid_user }}"
  when: cluster_name is defined

- name: Stop services with srvctl
  shell: |
    ( srvctl stop listener -l {{ listener_name }} -f ) || true
    ( srvctl stop home -o {{ oracle_home }} -s /tmp/srvctl -t abort -f ) || true
    ( srvctl stop asm -o abort -f ) || true
  environment:
    ORACLE_HOME: "{{ grid_home }}"
    PATH: "{{ grid_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
    ORACLE_SID: "{{ asm_sid }}"
    LD_LIBRARY_PATH: "{{ grid_home }}/lib:${LD_LIBRARY_PATH}"
  register: srvice_stop
  ignore_errors: yes
  become: yes
  become_user: "{{ grid_user }}"
  when: cluster_name is not defined

- name: Deconfigure CRS (non-RAC)
  command: "{{ grid_home }}/perl/bin/perl -I {{ grid_home }}/perl/lib -I {{ grid_home }}/crs/install {{ grid_home }}/crs/install/roothas.pl -deconfig -force -verbose"
  register: has_deconfig
  ignore_errors: yes
  become: yes
  become_user: root
  when: cluster_name is not defined
  
- name: Uninstall TFA service
  command: "{{ grid_home }}/bin/tfactl uninstall -local -silent"
  environment:
    PATH: "{{ grid_home }}/perl/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
    PERL5LIB: "{{ grid_home }}/perl/lib"
  register: uninstall_tfa
  ignore_errors: yes
  become: yes
  become_user: root

- name: Kill (SIGTERM) any remaining Oracle processes
  command: "pkill -f {{ item }}"
  with_items:
    - ora_smon
    - tnslsnr
    - agent13c
    - ohasd
    - orachkscheduler
    - OSWatcher
    - PROTOCOL=beq
    - '\\+ASM'
    - /grid/bin
    - /grid/jdk
    - "-u {{ grid_user }}"
    - "-u {{ oracle_user }}"
  ignore_errors: yes
  register: kill_procs
  changed_when: kill_procs.rc == 0
  failed_when:
    - kill_procs.rc != 0
    - kill_procs.rc != 1
  become: yes
  become_user: root

- name: Wait for processes to die (10 seconds)
  pause:
    seconds: 10

- name: Kill (SIGKILL) any remaining Oracle processes
  command: "pkill -9 -f {{ item }}"
  with_items:
    - ora_smon
    - tnslsnr
    - agent13c
    - ohasd
    - orachkscheduler
    - OSWatcher
    - PROTOCOL=beq
    - '\\+ASM'
    - /grid/bin
    - /grid/jdk
    - "-u {{ grid_user }}"
    - "-u {{ oracle_user }}"
  ignore_errors: yes
  register: kill_procs
  changed_when: kill_procs.rc == 0
  failed_when:
    - kill_procs.rc != 0
    - kill_procs.rc != 1
  become: yes
  become_user: root

- name: Remove directories and files
  become: yes
  become_user: root
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ scripts_dir }}"
    - "{{ logs_dir }}"
    - "{{ oracle_home }}"
    - "{{ grid_home }}"
    - "{{ oracle_root }}"
    - "{{ swlib_unzip_path }}"
    - /usr/tmp/.oracle
    - /var/tmp/.oracle
    - /tmp/.oracle
    - /tmp/srvctl
    - /etc/oratab
    - /etc/oragchomelist
    - /etc/oraInst.loc
    - /usr/local/bin/dbhome
    - /usr/local/bin/oraenv
    - /usr/local/bin/coraenv
    - /etc/init.d/acfssihamount
    - /etc/init.d/ohasd
    - /etc/init.d/init.ohasd
    - /etc/init.d/init.orachkscheduler
    - /etc/init.d/init.tfa
    - /etc/oracle
    - /etc/sysconfig/oracleasm-update
    - /etc/sysconfig/oracleasm.rpmsave
    - /etc/sysconfig/oracledrivers.conf
    - /etc/systemd/system/oracle-ohasd.service
    - /etc/systemd/system/graphical.target.wants/oracle-ohasd.service
    - /etc/systemd/system/multi-user.target.wants/oracle-ohasd.service
    - /etc/systemd/system/multi-user.target.wants/oracleasm.service
    - /var/log/oracleasm
    - /var/log/oracleohasd
  ignore_errors: true
  register: remove_files

- name: Clean up shared memory segments
  become: yes
  become_user: root
  shell: "ipcs -m | awk '/{{ item }}/ {print $2}' | xargs -r -L1 ipcrm -m"
  with_items:
    - "{{ grid_user }}"
    - "{{ oracle_user }}"

- name: Clean up semaphores
  become: yes
  become_user: root
  shell: "ipcs -s | awk '/{{ item }}/ {print $2}' | xargs -r -L1 ipcrm -s"
  with_items:
    - "{{ grid_user }}"
    - "{{ oracle_user }}"

- name: Find /tmp/CVU directories to remove
  find:
    paths: /tmp
    patterns: "CVU.*"
    file_type: directory
    use_regex: true
  register: tmp_dirs

- name: Remove any found /tmp/CVU dirs
  become: yes
  become_user: root
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ tmp_dirs.files }}"

- name: (asmlib) Delete asmlib managed disks
  become: yes
  become_user: root
  command: "/usr/sbin/oracleasm deletedisk {{ item.1.name }}"
  with_subelements:
    - "{{ asm_disks }}"
    - disks
  when: asm_disk_management == "asmlib"
  register: delete_asm_disks
  ignore_errors: true

- name: (asmlib) remove oracleasm packages
  become: yes
  become_user: root
  yum:
    name: '*oracleasm*'
    state: absent
    lock_timeout: 180
  when: asm_disk_management == "asmlib"
  register: remove_oracleasm

- name: Lazy unmount Oracle user data devices
  shell: |
    umount -f -l "{{ item.mount_point }}"
  ignore_errors: true
  with_items:
    - "{{ oracle_user_data_mounts }}"

- name: Remove Oracle user data devices from fstab
  mount:
    fstype: "{{ item.fstype }}"
    src: "{{ item.blk_device }}1"
    path: "{{ item.mount_point }}"
    state: absent
  register: fstab_result
  failed_when:
    - fstab_result is failed
    - "'Directory not empty' not in fstab_result.module_stdout"
  with_items:
    - "{{ oracle_user_data_mounts }}"
    
- name: Remove magic strings from Oracle user data partitions
  become: yes
  become_user: root
  command: "wipefs --all --force {{ item.blk_device }}1"
  when: "'mapper' not in item.blk_device"
  ignore_errors: true
  with_items:
    - "{{ oracle_user_data_mounts }}"

- name: Remove magic strings from Oracle user data disks
  become: yes
  become_user: root
  command: "wipefs --all --force {{ item.blk_device }}"
  with_items:
    - "{{ oracle_user_data_mounts }}"

- name: Reload partition table for user data disks
  become: yes
  become_user: root
  command: "partprobe {{ item.blk_device }}"
  with_items:
    - "{{ oracle_user_data_mounts }}"

- name: Zero-out header in ASM disks partitions
  become: yes
  become_user: root
  command: "dd if=/dev/zero of={{ item.1.blk_device }} bs=1M count=100"
  with_subelements:
    - "{{ asm_disks }}"
    - disks
  register: zero_disks
  ignore_errors: true

- name: Disable and remove swap
  block:
    - name: Turn swap off
      command: "swapoff {{ swap_blk_device }}1"
    - name: Clean swap disk partition
      command: "dd if=/dev/zero of={{ swap_blk_device }}1 bs=1M count=100"
    - name: Remove swap partition
      parted:
        device: "{{ swap_blk_device }}"
        number: 1
        state: absent
    - name: Remove fstab entry
      lineinfile:
        path: /etc/fstab
        regexp: '^{{ swap_blk_device }}'
        state: absent
  become: yes
  when:
    - swap_blk_device is defined
    - swap_blk_device|length > 0
  ignore_errors: true
  tags: remove-swap

- name: Refresh kernel partition table view
  become: yes
  become_user: root
  command: "blockdev --rereadpt {{ item.blk_device }}"
  with_items:
    - "{{ oracle_user_data_mounts }}"
  when: "'mapper' not in item.blk_device"
  ignore_errors: true

- name: Delete partition all ASM disks
  parted:
    device: "{{ item.1.blk_device }}"
    number: 1
    state: absent
  with_subelements:
    - "{{ asm_disks }}"
    - disks
  when: "'mapper' not in item.1.blk_device"
  ignore_errors: true
  tags: asm-disks

- name: (udev) remove oracle udev rules
  become: yes
  become_user: root
  file:
    path: /etc/udev/rules.d/99-oracle-asmdevices.rules
    state: absent
  when: asm_disk_management == "udev"

- name: (udev) Reload rules
  become: yes
  become_user: root
  shell: ( /sbin/udevadm control --reload-rules && /sbin/udevadm trigger )
  when: asm_disk_management == "udev"

- name: Remove oracle kernel modules
  become: yes
  become_user: root
  shell: awk '/^oracle/ {print $1}' /proc/modules | sudo xargs -r modprobe -r

- name: Remove users
  become: yes
  become_user: root
  user:
    name: "{{ item.name }}"
    state: absent
    remove: yes
    force: yes
  with_items: "{{ oracle_users }}"
  register: remove_users

- name: Remove groups
  become: yes
  become_user: root
  group:
    name: "{{ item.group }}"
    state: absent
  with_items:
    - "{{ oracle_groups }}"
    - "{{ asm_groups }}"
  register: remove_groups

- name: Results prior to server reboot
  debug:
    msg:
      - "{{ srvice_stop }}"
      - "{{ kill_procs }}"
      - "{{ has_deconfig }}"
      - "{{ remove_files }}"
      - "{{ remove_users }}"
      - "{{ remove_groups }}"
      - "{{ delete_asm_disks }}"
      - "{{ remove_oracleasm }}"
      - "{{ zero_disks }}"
    verbosity: 1

- name: Server reboot
  become: yes
  become_user: root
  reboot:
  register: server_reboot
  when: "('virtualbox' in ansible_virtualization_type)"

- name: Re-mount swlib
  become: yes
  become_user: root
  # Not using the Ansible mount module as this is a temporary mount
  command: "mount -t vboxsf swlib {{ swlib_path }}"
  when: "('virtualbox' in ansible_virtualization_type)"
