# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: rac-opatch | Create OCM response file
  script: expect_rsp.sh {{ oracle_base }} {{ oracle_home }} {{ swlib_unzip_path }}
  args:
    creates: "{{ swlib_unzip_path }}/ocm.rsp"
  with_items:
    - "{{ rdbms_patches }}"
    - "{{ gi_patches }}"
  when:
    - item.ocm
    - item.release == oracle_ver
  become: yes
  become_user: "{{ oracle_user }}"
  tags: rac-opatch

- name: rac-opatch | 12.2 bug resolution - MOS (Doc ID 2401455.1)
  copy:
    src: "{{ oracle_root }}/oraInventory/oraInst.loc"
    dest: "{{ grid_home }}/oraInst.loc"
    remote_src: yes
    owner: "{{ grid_user }}"
    group: "{{ oracle_group }}"
    mode: u=rw,g=r,o=
  when: oracle_ver == '12.2.0.1.0'
  become: yes
  become_user: root

- name: rac-opatch | Update GI OPatch
  unarchive:
    src: "{{ swlib_path }}/{{ item.patchfile }}"
    dest: "{{ grid_home }}"
    remote_src: yes
  with_items:
    - "{{ opatch_patches }}"
  when:
    - item.release == oracle_ver
    - item.category == "OPatch"
  become: yes
  become_user: "{{ grid_user }}"
  tags: rac-opatch

- name: rac-opatch | Update RDBMS OPatch
  unarchive:
    src: "{{ swlib_path }}/{{ item.patchfile }}"
    dest: "{{ oracle_home }}"
    remote_src: yes
  with_items:
    - "{{ opatch_patches }}"
  when:
    - item.release == oracle_ver
    - item.category == "OPatch"
  become: yes
  become_user: "{{ oracle_user }}"
  tags: rac-opatch

- name: rac-opatch | Unzip GI patch
  unarchive:
    src: "{{ swlib_path }}/{{ item.patchfile }}"
    dest: "{{ swlib_unzip_path }}"
    remote_src: yes
    owner: "{{ grid_user }}"
    group: "{{ oracle_group }}"
  with_items:
    - "{{ gi_patches }}"
  when: item.release == oracle_rel and item.category != "HAS_interim_patch"
  become: yes
  tags: rac-opatch

- name: rac-opatch | Run GI opatch analyze
  command: "{{ grid_home }}/OPatch/{{ patch.method }} -analyze"
  args:
    chdir: "{{ swlib_unzip_path }}/{{ patch.patchnum }}/{{ patch.patch_subdir }}"
  loop: "{{ gi_patches | json_query('[?release==`'+ oracle_rel +'`]') }}"
  loop_control:
    loop_var: patch
  when:
    - not patch.prereq_check
    - oracle_ver != '11.2.0.4.0'
  register: opatch_analyze
  changed_when: false
  ignore_errors: true
  #failed_when: "'Analysis for the patches failed' in opatch_analyze.results.0.stdout"
  become: yes
  tags: rac-opatch

- name: rac-opatch | If patch to apply then variable is true
  block:
  - name: check is apply is needed
    set_fact:
      apply_needed: "{{ opatch_analyze.results.0.stdout_lines is search('Following patches were SUCCESSFULLY analyzed to be applied') }}"
  - name: show the variable value
    debug:
      msg: "apply needed? - {{ apply_needed }}"
  tags: rac-opatch

- name: rac-opatch | GI opatch analyze output
  debug: var=opatch_analyze.results.0.stdout_lines
  when: opatch_analyze is defined
  tags: rac-opatch

- name: rac-opatch | Copy oui-patch.xml to remote nodes (bug from MOS 2582139.1)
  command: "scp -p {{ oracle_inventory }}/ContentsXML/oui-patch.xml {{ item }}:{{ oracle_inventory }}/ContentsXML/oui-patch.xml"
  loop: "{{ groups['dbasm'] }}"
  when:
    - item != inventory_hostname
    - inventory_hostname == groups['dbasm'].0
    - oracle_rel | regex_search('^19\.') | default('', true) | length > 0
  become: yes
  become_user: "{{ grid_user }}"
  tags: rac-opatch,bug-opatch

- name: rac-opatch | TFA status
  command: "{{ grid_home }}/bin/tfactl status"
  no_log: true
  register: tfa_check
  become: yes
  changed_when: false
  ignore_errors: true
  tags: rac-opatch,tfa

  # opatchauto fails if TFA is not stopped
- name: rac-opatch | Stop TFA
  command: "{{ grid_home }}/bin/tfactl stop"
  no_log: true
  become: yes
  when:
    - "'is not running' not in tfa_check.stdout"
    - "'Cannot establish connection with TFA Server' not in tfa_check.stdout"
    - apply_needed
  ignore_errors: true
  tags: rac-opatch,tfa

  # hung "asmcmd daemon" process causing failure of opatchauto
- name: rac-opatch | Kill asmcmd daemon processes
  command: "pkill -9 'asmcmd daemon'"
  no_log: true
  when: apply_needed
  become: yes
  ignore_errors: true
  tags: rac-opatch

  # with MGMTDB installed under grid permissions should be adjusted for oracle
- name: rac-opatch | Adjust sqlpatch objects
  file:
    path: "{{ item.obj_path }}"
    state: "{{ item.obj_type }}"
    mode: g+w
    owner: "{{ oracle_user }}"
    group: "{{ oracle_group }}"
  loop:
    - { obj_path: "{{ oracle_base }}/cfgtoollogs/sqlpatch", obj_type: "directory" }
    - { obj_path: "{{ oracle_base }}/cfgtoollogs/sqlpatch/sqlpatch_history.txt", obj_type: "file" }
  when: apply_needed
  become: yes
  ignore_errors: true
  tags: patch_rdbms,datapatch

- name: rac-opatch | Remove db_state.out if it exists
  file:
    path: "{{ swlib_unzip_path }}/db_state.out"
    state: absent
  when: apply_needed
  become: yes
  become_user: "{{ oracle_user }}"
  tags: rac-opatch,stop-home

- name: rac-opatch | Define node variable
  set_fact:
    node_var: "-node {{ inventory_hostname }}"
  when: apply_needed
  tags: rac-opatch,stop-home

- name: rac-opatch | Stop RDBMS home
  command: "{{ oracle_home }}/bin/srvctl stop home -o {{ oracle_home }} -t immediate -s {{ swlib_unzip_path }}/db_state.out {{ node_var }}"
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
  when: apply_needed
  register: stop_home
  failed_when: stop_home.rc not in [0,2]
  become: yes
  become_user: "{{ oracle_user }}"
  tags: rac-opatch,stop-home

- name: rac-opatch | Run GI opatch apply
  command: "{{ grid_home }}/OPatch/{{ patch.method }} {{ '-ocmrf {{ swlib_unzip_path }}/ocm.rsp' if patch.ocm else '' }} {{ '' if patch.method=='opatchauto apply' else ( ' -nonrolling' if groups['dbasm'] | length==1 else ' -rolling' ) }}"
  args:
    chdir: "{{ swlib_unzip_path }}/{{ patch.patchnum }}{{ patch.patch_subdir }}"
  loop: "{{ gi_patches | json_query('[?release==`'+ oracle_rel +'`]') }}"
  loop_control:
    loop_var: patch
  when:
    - oracle_ver != '11.2.0.4.0'
    - apply_needed
  register: opatch_apply
  become: yes
  tags: rac-opatch

- name: rac-opatch | Results of GI opatch apply
  debug: var=opatch_apply.results.0.stdout_lines
  when: opatch_apply is defined
  tags: rac-opatch

- name: rac-opatch | 12.1 bug resolution - MOS (Doc ID 1084186.1)
  shell: |
    set -o pipefail
    setasmgidwrap o={{ oracle_home }}/bin/oracle
  environment:
    ORACLE_HOME: "{{ grid_home }}"
    ORACLE_SID: "{{ asm_sid }}"
    PATH: "{{ grid_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
  args:
    chdir: "{{ grid_home }}/bin"
  when: oracle_ver == '12.1.0.2.0'
  register: setasmgidwrap_output
  become: yes
  become_user: "{{ grid_user }}"
  tags: rac-opatch

- name: rac-opatch | 12.1 bug resolution results
  debug: var=setasmgidwrap_output
  when: oracle_ver == '12.1.0.2.0'
  tags: rac-opatch

- name: rac-opatch | Pause for 90 seconds due to delayed startup after opatch on 12c
  wait_for:
    timeout: 90
  delegate_to: localhost
  when: oracle_ver in ['12.1.0.2.0','12.2.0.1.0'] and home_type == 'GRID'
  tags: rac-opatch

- name: rac-opatch | Unzip RDBMS patch
  unarchive:
    src: "{{ swlib_path }}/{{ item.patchfile }}"
    dest: "{{ swlib_unzip_path }}"
    remote_src: yes
    owner: "{{ oracle_user }}"
    group: "{{ oracle_group }}"
  with_items:
    - "{{ rdbms_patches }}"
  when: item.release == oracle_rel
  become: yes
  tags: rac-opatch,sw_unzip

- name: rac-opatch | Run RDBMS opatch analyze
  command: "{{ oracle_home }}/OPatch/opatch prereq CheckConflictAgainstOHWithDetail -ph ./"
  args:
    chdir: "{{ swlib_unzip_path }}/{{ patch.patchnum }}/{{ patch.patch_subdir }}"
  loop: "{{ rdbms_patches | json_query('[?release==`'+ oracle_rel +'`]') }}"
  loop_control:
    loop_var: patch
  when:
    - patch.prereq_check
    - oracle_ver != '11.2.0.4.0'
  register: rdbms_analyze
  ignore_errors: true
  changed_when: false
  become: yes
  become_user: "{{ oracle_user }}"
  tags: rac-opatch

- name: rac-opatch | RDBMS opatch analyze output
  debug: var=rdbms_analyze.results.0.stdout_lines
  when: rdbms_analyze is defined
  tags: rac-opatch

- name: rac-opatch | Run RDBMS opatch apply
  command: "{{ oracle_home }}/OPatch/{{ patch.method }} -silent {{ '-ocmrf {{ swlib_unzip_path }}/ocm.rsp' if patch.ocm else '' }}"
  args:
    chdir: "{{ swlib_unzip_path }}/{{ patch.patchnum }}{{ patch.patch_subdir }}"
  loop: "{{ rdbms_patches | json_query('[?release==`'+ oracle_rel +'`]') }}"
  loop_control:
    loop_var: patch
  when: oracle_ver != '11.2.0.4.0'
  register: rdbms_apply
  become: yes
  become_user: "{{ oracle_user }}"
  tags: rac-opatch

- name: rac-opatch | Results of RDBMS opatch apply
  debug: var=rdbms_apply.results.0.stdout_lines
  when: rdbms_apply is defined
  tags: rac-opatch

- name: rac-opatch | Start RDBMS home
  command: "{{ oracle_home }}/bin/srvctl start home -o {{ oracle_home }} -s {{ swlib_unzip_path }}/db_state.out  {{ node_var }}"
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
  when: apply_needed
  register: start_home
  failed_when: start_home.rc not in [0,2]
  become: yes
  become_user: "{{ oracle_user }}"
  tags: rac-opatch,start-home
